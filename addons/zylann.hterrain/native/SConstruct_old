#!python
import os

opts = Variables([], ARGUMENTS)

# Gets the standard flags CC, CCX, etc.
env = Environment(ENV = os.environ)

# Define our options
opts.Add(EnumVariable('target', "Compilation target", 'debug', ['debug', 'release']))
opts.Add(EnumVariable('platform', "Compilation platform", '', ['', 'windows', 'linux', 'osx']))
opts.Add(BoolVariable('use_llvm', "Use the LLVM / Clang compiler", 'no'))
opts.Add(EnumVariable('macos_arch', "Target macOS architecture", 'universal', ['universal', 'x86_64', 'arm64']))

# Hardcoded ones
target_path = "bin/"
TARGET_NAME = "hterrain_native"

# Local dependency paths
godot_headers_path = "godot-cpp/godot-headers/"
cpp_bindings_path = "godot-cpp/"
cpp_bindings_library = "libgodot-cpp"

# only support 64 at this time
bits = 64

# Updates the environment with the option variables.
opts.Update(env)

# Process some arguments
if env['use_llvm']:
    env['CC'] = 'clang'
    env['CXX'] = 'clang++'

if env['platform'] == '':
    print("No valid target platform selected.")
    quit()

# For the reference:
# - CCFLAGS are compilation flags shared between C and C++
# - CFLAGS are for C-specific compilation flags
# - CXXFLAGS are for C++-specific compilation flags
# - CPPFLAGS are for pre-processor flags
# - CPPDEFINES are for pre-processor defines
# - LINKFLAGS are for linking flags

# Check our platform specifics
if env['platform'] == "osx":
    target_path += 'osx/'
    cpp_bindings_library += '.osx'
    if env['target'] == 'debug':
        env.Append(CCFLAGS = ['-g', '-O2', '-arch', 'x86_64'])
        env.Append(CXXFLAGS = ['-std=c++17'])
        env.Append(LINKFLAGS = ['-arch', 'x86_64'])
    else:
        env.Append(CCFLAGS = ['-g', '-O3', '-arch', 'x86_64'])
        env.Append(CXXFLAGS = ['-std=c++17'])
        env.Append(LINKFLAGS = ['-arch', 'x86_64'])

elif env['platform'] == "linux":
    target_path += 'linux/'
    cpp_bindings_library += '.linux'
    if env['target'] == 'debug':
        # -g3 means we want plenty of debug info, more than default
        env.Append(CCFLAGS = ['-fPIC', '-g3', '-Og'])
        env.Append(CXXFLAGS = ['-std=c++17'])
    else:
        env.Append(CCFLAGS = ['-fPIC', '-O3'])
        env.Append(CXXFLAGS = ['-std=c++17'])
        env.Append(LINKFLAGS = ['-s'])

elif env['platform'] == "windows":
    target_path += 'win64/'
    cpp_bindings_library += '.windows'
    # This makes sure to keep the session environment variables on windows,
    # that way you can run scons in a vs 2017 prompt and it will find all the required tools
    #env.Append(ENV = os.environ)

    env.Append(CPPDEFINES = ['WIN32', '_WIN32', '_WINDOWS', '_CRT_SECURE_NO_WARNINGS'])
    env.Append(CCFLAGS = ['-W3', '-GR'])
    if env['target'] == 'debug':
        env.Append(CPPDEFINES = ['_DEBUG'])
        env.Append(CCFLAGS = ['-EHsc', '-MDd', '-ZI'])
        env.Append(LINKFLAGS = ['-DEBUG'])
    else:
        env.Append(CPPDEFINES = ['NDEBUG'])
        env.Append(CCFLAGS = ['-O2', '-EHsc', '-MD'])

if env['target'] == 'debug':
    cpp_bindings_library += '.debug'
else:
    cpp_bindings_library += '.release'

if env['macos_arch'] == 'universal':
    cpp_bindings_library += '.' + str(bits)
else:
    cpp_bindings_library += '.' + env['macos_arch']

# make sure our binding library is properly included
env.Append(CPPPATH = [
    '.', 
    godot_headers_path, 
    cpp_bindings_path + 'include/godot_cpp/',
    cpp_bindings_path + 'include/godot_cpp/core/',
    cpp_bindings_path + 'gdextension',
    cpp_bindings_path + "gen/include/godot_cpp/classes/"
])
env.Append(LIBPATH = [cpp_bindings_path + 'bin/'])
env.Append(LIBS = [cpp_bindings_library])

# Add source files of our library
env.Append(CPPPATH = ['src/'])
sources = Glob('src/*.cpp')

library = env.SharedLibrary(target = target_path + TARGET_NAME , source = sources)

Default(library)

# Generates help for the -h scons option.
Help(opts.GenerateHelpText(env))
